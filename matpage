import { Component, Input, Output, EventEmitter } from '@angular/core';

@Component({
  selector: 'app-custom-paginator',
  templateUrl: './custom-paginator.component.html',
  styleUrls: ['./custom-paginator.component.css']
})
export class CustomPaginatorComponent {
  @Input() length = 0;
  @Input() pageSize = 10;
  @Input() pageIndex = 0;
  @Output() pageChange = new EventEmitter<number>();

  // Get the total number of pages
  get totalPages(): number {
    return Math.ceil(this.length / this.pageSize);
  }

  // Emit the page change event
  changePage(newPageIndex: number) {
    this.pageIndex = newPageIndex;
    this.pageChange.emit(newPageIndex);
  }

  // Navigate to the next or previous page
  nextPage() {
    if (this.pageIndex < this.totalPages - 1) {
      this.changePage(this.pageIndex + 1);
    }
  }

  previousPage() {
    if (this.pageIndex > 0) {
      this.changePage(this.pageIndex - 1);
    }
  }

  // Display latest 4, last 2 pages with ellipses in between if needed
  get displayedPageNumbers(): (number | string)[] {
    const pages: (number | string)[] = [];
    const totalPages = this.totalPages;

    if (totalPages <= 6) {
      // Show all pages if fewer than or equal to 6 pages
      for (let i = 0; i < totalPages; i++) {
        pages.push(i);
      }
    } else {
      // Latest 4 pages (relative to the current page) and last 2 pages
      const start = Math.max(0, this.pageIndex - 3); // start of latest 4 pages
      const end = Math.min(totalPages - 2, this.pageIndex + 1); // end of latest 4 pages

      // Add latest 4 pages
      for (let i = start; i < end; i++) {
        pages.push(i);
      }

      // Add ellipsis if there is a gap
      if (end < totalPages - 2) {
        pages.push('...');
      }

      // Add last 2 pages
      pages.push(totalPages - 2, totalPages - 1);
    }

    return pages;
  }
}

===================================================


<div class="paginator-container">
  <!-- First and Previous Buttons with Custom Icons -->
  <button mat-icon-button (click)="changePage(0)" [disabled]="pageIndex === 0">
    <img src="path/to/first-icon.svg" alt="First page" />
  </button>
  <button mat-icon-button (click)="previousPage()" [disabled]="pageIndex === 0">
    <img src="path/to/previous-icon.svg" alt="Previous page" />
  </button>

  <!-- Page Number Buttons -->
  <ng-container *ngFor="let page of displayedPageNumbers">
    <ng-container *ngIf="page === '...'">
      <!-- Ellipsis -->
      <span class="ellipsis">...</span>
    </ng-container>
    <ng-container *ngIf="page !== '...'">
      <!-- Page Number Button -->
      <button mat-button 
              [color]="pageIndex === page ? 'primary' : 'default'" 
              (click)="changePage(page as number)">
        {{ (page as number) + 1 }}
      </button>
    </ng-container>
  </ng-container>

  <!-- Next and Last Buttons with Custom Icons -->
  <button mat-icon-button (click)="nextPage()" [disabled]="pageIndex >= totalPages - 1">
    <img src="path/to/next-icon.svg" alt="Next page" />
  </button>
  <button mat-icon-button (click)="changePage(totalPages - 1)" [disabled]="pageIndex >= totalPages - 1">
    <img src="path/to/last-icon.svg" alt="Last page" />
  </button>
</div>
====================================

.paginator-container {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 8px;
}

.paginator-container button {
  min-width: 36px;
}

.paginator-container .ellipsis {
  padding: 0 8px;
  font-size: 18px;
}

========================================

<app-custom-paginator
  [length]="totalItems"
  [pageSize]="pageSize"
  [pageIndex]="currentPage"
  (pageChange)="onPageChange($event)">
</app-custom-paginator>

===========================

import { Component } from '@angular/core';

@Component({
  selector: 'app-main',
  templateUrl: './main.component.html'
})
export class MainComponent {
  totalItems = 100; // total items
  pageSize = 10; // items per page
  currentPage = 0;

  onPageChange(newPageIndex: number) {
    this.currentPage = newPageIndex;
    // Fetch new data based on newPageIndex
  }
}
